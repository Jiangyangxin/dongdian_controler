%YAML:1.0

#common parameters
imu_topic: "/robot_1/wit/imu"
image_topic: "/pylon_camera_node/image_raw"
# imu_topic: "/camera/imu"
# image_topic: "/camera/color/image_raw"
depth_topic: "/camera/aligned_depth_to_color/image_raw"
output_path: "~/output/"

#by gzf
static_init_flag: 1  # //0:不采用静态初始化；1:采用静态初始化
real_topic: "/vrpn_client_node/VIO_gzf/pose"
real_flag: 1
fake_depth_flag: 1
fake_depth: 174.5185117971263
#现在是3号机器人
# 5 0.18380791622836692  #3 0.18968818589547887   #2 0.18348128467425173 #4 0.1838196365983478 #1 174.5185117971263
#189.68818589547887
#pointcloud settings
pcl_dist: 10
u_boundary: 10
d_boundary: 10
l_boundary: 40
r_boundary: 40
pcl_min_dist: 0.3
pcl_max_dist: 6
resolution: 0.02

#camera calibration
model_type: PINHOLE
camera_name: camera
# image_width: 640
# image_height: 480
image_width: 1280
image_height: 1024
  #TODO modify distortion

distortion_parameters:
   k1: -0.09370557
   k2: 0.17895836
   p1: 0.00183757
   p2: -0.00111102  

projection_parameters:
   fx: 1548.62710993
   fy: 1548.53141462
   cx: 614.41960658
   cy: 515.59187559

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [  -0.84529384, -0.53410019, 0.01467371,
           -0.53425532, 0.84526357, -0.01003792, 
           -0.0070419, -0.0163245, -0.99984195]    

#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.11594248,0.21316312,0.05997084]

#feature traker paprameters
max_cnt: 150           # max feature number in feature tracking
min_dist: 25            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
#for handheld, wheeld
acc_n: 1.0           # accelerometer measurement noise standard deviation. #0.2 0.02389635  0.00543 
gyr_n: 0.05         # gyroscope measurement noise standard deviation.     #0.05 0.02405213  0.00144 
acc_w: 0.02        # accelerometer bias random work noise standard deviation.  #0.02 0.000005415  0.000117
gyr_w: 0.001       # gyroscope bias random work noise standard deviation.     #4.0e-5 0.000000027     

#for tracked applications
#acc_n: 0.5          # accelerometer measurement noise standard deviation. #0.2
#gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05
#acc_w: 0.001         # accelerometer bias random work noise standard deviation.  #0.02
#gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5

g_norm: 9.81       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 0             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/ddmp/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.000                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 1                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet).

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
